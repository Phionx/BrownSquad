import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;

public class Tetris{
//Instance Variables
	String change_direction = "";
    public static final int time = 200;
    public int GridX, GridY;
	public static final String ANSI_RESET = "\u001B[0m";
	public static final String ANSI_BLACK = "\u001B[30m";
	public static final String ANSI_RED = "\u001B[31m";
	public static final String ANSI_GREEN = "\u001B[32m";
	public static final String ANSI_YELLOW = "\u001B[33m";
	public static final String ANSI_BLUE = "\u001B[34m";
	public static final String ANSI_PURPLE = "\u001B[35m";
	public static final String ANSI_CYAN = "\u001B[36m";
	public static final String ANSI_WHITE = "\u001B[37m";
/*May not be necessary   
    public static final GridPiece [][] O_Piece = new GridPiece [2][2];
    public static final GridPiece [][] J_Piece = new GridPiece [3][3];
    public static final GridPiece [][] L_Piece = new GridPiece [3][3];
    public static final GridPiece [][] I_Piece = new GridPiece [4][4];
    public static final GridPiece [][] S_Piece = new GridPiece [3][3];
    public static final GridPiece [][] T_Piece = new GridPiece [3][3];
    public static final GridPiece [][] Z_Piece = new GridPiece [3][3];
*/
    public ArrayList<GamePiece> GameObjects = new ArrayList<GamePiece>();
    public ArrayList<GameBlock> GameBlocks = new ArrayList<GameBlock>();
    public GridPiece [][] Game;
    public GridPiece [][] GameReset;

//Initialization ------------------------------------------------------------------------------------------------------------------------
    public Tetris(int SizeX, int SizeY){ 
        GridX = SizeX; GridY = SizeY;
        if(SizeX < 10) GridX = 10;
        if (SizeY < 10) GridY = 10;
        Game = new GridPiece [GridY][GridX];
        GameReset = new GridPiece[GridY][GridX];
        init();
        //initPieces(); //May not be necessary
        for(int i = 0; i < Game.length; i++){
            for(int j = 0; j < Game[i].length; j++){
                GameReset[i][j] = Game[i][j];
            }
        }
    }
    /*May not be necessary
    public void initPieces(){
        O_Piece[0][0] = new GridPiece("Game", "O");
        O_Piece[0][1] = new GridPiece("Game", "O");
        O_Piece[1][0] = new GridPiece("Game", "O");
        O_Piece[1][1] = new GridPiece("Game", "O");

        J_Piece[0][0] = new GridPiece("Game", "J");
        J_Piece[0][1] = new GridPiece("Game", "J");
        J_Piece[0][2] = new GridPiece("Game", "J");
        J_Piece[1][0] = new GridPiece("Game", "J");
        J_Piece[1][1] = new GridPiece("Game", "J");
        J_Piece[1][2] = new GridPiece("Game", "J");
        J_Piece[2][0] = new GridPiece("Game", "J");
        J_Piece[2][1] = new GridPiece("Game", "J");
        J_Piece[2][2] = new GridPiece("Game", "J");

        I_Piece[0][0] = new GridPiece("Game", "I");
        I_Piece[0][1] = new GridPiece("Game", "I");
        I_Piece[0][2] = new GridPiece("Game", "I");
        I_Piece[0][3] = new GridPiece("Game", "I");
        I_Piece[1][0] = new GridPiece("Game", "I");
        I_Piece[1][1] = new GridPiece("Game", "I");
        I_Piece[1][2] = new GridPiece("Game", "I");
        I_Piece[1][3] = new GridPiece("Game", "I");
        I_Piece[2][0] = new GridPiece("Game", "I");
        I_Piece[2][1] = new GridPiece("Game", "I");
        I_Piece[2][2] = new GridPiece("Game", "I");
        I_Piece[2][3] = new GridPiece("Game", "I");
        I_Piece[3][0] = new GridPiece("Game", "I");
        I_Piece[3][1] = new GridPiece("Game", "I");
        I_Piece[3][2] = new GridPiece("Game", "I");
        I_Piece[3][3] = new GridPiece("Game", "I");

        L_Piece[0][0] = new GridPiece("Game", "L");
        L_Piece[0][1] = new GridPiece("Game", "L");
        L_Piece[0][2] = new GridPiece("Game", "L");
        L_Piece[1][0] = new GridPiece("Game", "L");
        L_Piece[1][1] = new GridPiece("Game", "L");
        L_Piece[1][2] = new GridPiece("Game", "L");
        L_Piece[2][0] = new GridPiece("Game", "L");
        L_Piece[2][1] = new GridPiece("Game", "L");
        L_Piece[2][2] = new GridPiece("Game", "L");

        S_Piece[0][0] = new GridPiece("Game", "S");
        S_Piece[0][1] = new GridPiece("Game", "S");
        S_Piece[0][2] = new GridPiece("Game", "S");
        S_Piece[1][0] = new GridPiece("Game", "S");
        S_Piece[1][1] = new GridPiece("Game", "S");
        S_Piece[1][2] = new GridPiece("Game", "S");
        S_Piece[2][0] = new GridPiece("Game", "S");
        S_Piece[2][1] = new GridPiece("Game", "S");
        S_Piece[2][2] = new GridPiece("Game", "S");

        T_Piece[0][0] = new GridPiece("Game", "T");
        T_Piece[0][1] = new GridPiece("Game", "T");
        T_Piece[0][2] = new GridPiece("Game", "T");
        T_Piece[1][0] = new GridPiece("Game", "T");
        T_Piece[1][1] = new GridPiece("Game", "T");
        T_Piece[1][2] = new GridPiece("Game", "T");
        T_Piece[2][0] = new GridPiece("Game", "T");
        T_Piece[2][1] = new GridPiece("Game", "T");
        T_Piece[2][2] = new GridPiece("Game", "T");

        Z_Piece[0][0] = new GridPiece("Game", "Z");
        Z_Piece[0][1] = new GridPiece("Game", "Z");
        Z_Piece[0][2] = new GridPiece("Game", "Z");
        Z_Piece[1][0] = new GridPiece("Game", "Z");
        Z_Piece[1][1] = new GridPiece("Game", "Z");
        Z_Piece[1][2] = new GridPiece("Game", "Z");
        Z_Piece[2][0] = new GridPiece("Game", "Z");
        Z_Piece[2][1] = new GridPiece("Game", "Z");
        Z_Piece[2][2] = new GridPiece("Game", "Z");

    }
    */
    
    public void init(){
        for(int a = 0; a < Game.length; a++){
            for(int b = 0; b < Game[a].length; b++) {
                Game[a][b] = new GridPiece("Game");
            }
        }

        for(int i = 0; i < Game[0].length; i++){//Setting the Top and Bottom
            Game[0][i] = new GridPiece("Top");
            Game[Game.length - 1][i] = new GridPiece("Bottom");
        }
        for(int j = 1; j < Game.length-1; j++){//Setting the Sides
            Game[j][0] = new GridPiece("Side");
            Game[j][1] = new GridPiece("Side");
            Game[j][Game[0].length -1] = new GridPiece("Side");
            Game[j][Game[0].length -2] = new GridPiece("Side");
        }
    }
    
//Movement------------------------------------------------------------------------------------------------------------------------
    public void update(String type){
        reset();
        if(GameObjects.isEmpty()){
            newPiece(type);
        }
        fallGamePiece(GameObjects.get(0));
    }
    
    public void fallGamePiece(GamePiece temp){
        GridPiece [][] tempState = Game;
        reset();
        int lowBlock = 0;
        addGameBlocks();
        for(int i = 0; i < temp.Size; i++){
            for(int j = 0; j < temp.Size; j++){
                if(temp.Pos[j][i]) lowBlock = j;
            }
            if(Game[temp.YPos + lowBlock + 1][i + temp.XPos].state){
                GamePieceToGameBlock(temp);
                addGameBlocks();
                Game = tempState;
                return;
            }
        }
        temp.YPos++;
        addGamePieces();
    }

    //work on Later
    public void fallGamePieces(){
        for(Iterator<GamePiece> i = GameObjects.iterator(); i.hasNext();){
            fallGamePiece(i.next());
        }
    }
    
    public void fallGameBlock(){
        
    }
    public void fallGameBlocks(){
        
    }
    
    public void clearLine(){
        
    }
    
    public void turnGamePiece(GamePiece shape){
    	
    	if (change_direction.equals("w")) {
    		if (shape.Turn == 0) shape.Turn = 1;
    		else if (shape.Turn == 1) shape.Turn = 2;
    		else if (shape.Turn == 2) shape.Turn = 3;
    		else if (shape.Turn == 3) shape.Turn = 2;
  
    		}
    	if (change_direction.equals("s")) {
    		if (shape.Turn == 0) shape.Turn = 3;
    		else if (shape.Turn == 1) shape.Turn = 0;
    		else if (shape.Turn == 2) shape.Turn = 1;
    		else if (shape.Turn == 3) shape.Turn = 0;
  
    		}
    	
    	shape.Pos = shape.ALL[shape.type -1][shape.Turn];
    }
    
    public void moveGamePiece(GamePiece shape){ 
    	if (change_direction.equals("a")) {
    		shape.XPos--;
    	}
    	if(change_direction.equals("d")) {
    		shape.XPos++;
    	}
        
    }
    
    
    
//Transition------------------------------------------------------------------------------------------------------------------------
    public void GamePieceToGameBlock(GamePiece temp){
        GameObjects.remove(temp);
        for(int i = 0; i < temp.Size; i++){
            for(int j = 0; j < temp.Size; j++){
                if(temp.Pos[i][j]){
                    GameBlocks.add(new GameBlock(temp.Block, temp.YPos + i, temp.XPos + j));
                }
            }
        }
    }
//AddToGame------------------------------------------------------------------------------------------------------------------------
    public void newPiece(String BlockType){
        GamePiece temp = new GamePiece(GridX/2, 1, BlockType, 1);
        GameObjects.add(temp);
    }

    public void addGamePieces(){
        for(Iterator<GamePiece> i = GameObjects.iterator(); i.hasNext();){
            addGamePieceToGame(i.next());
        }
    }

    public void addGamePieceToGame(GamePiece temp){
        int XSize, YSize, XStart, YStart;
        XSize = temp.Pos[0].length;
        YSize = temp.Pos.length;
        XStart = temp.XPos;
        YStart = temp.YPos;
        for(int i = YStart; i < YStart + YSize; i++){
            for(int j = XStart; j < XStart + XSize; j++){
                if(temp.Pos[i-YStart][j-XStart]){
                    Game[i][j] = new GridPiece("Game", temp.Block);
                    Game[i][j].state = true;
                }
            }
        }
    }

    public void addGameBlocks(){
        for(Iterator<GameBlock> i = GameBlocks.iterator(); i.hasNext();){
            GameBlock temp = i.next();
            Game[temp.X][temp.Y] = new GridPiece("Game", temp.name);
            Game[temp.X][temp.Y].state = true;
        }
    }

//Checkers------------------------------------------------------------------------------------------------------------------------
    public void checkClearLine(){
    }
//Printing------------------------------------------------------------------------------------------------------------------------        
    public String printGame(){
        String ans = "";
        for(GridPiece[] i: Game){
            for(GridPiece j: i) {
                if(j.state){
                    ans += j.color + j.design;
                }else {
                    ans += " ";
                }
            }
            ans += "\n";
        }
        return ans;
    }

//Reset,Clear,Delay---------------------------------------------------------------------------------------------------------------    
    public void reset(){
        for(int i = 0; i < Game.length; i++) for(int j = 0; j < Game.length; j++) Game[i][j] = GameReset[i][j];
    }

    private static void clear(){
        final String clear = "\u001b[2J";
        final String home = "\u001b[H";
        System.out.print(clear + home);
        System.out.flush();
    }
    
    private static void delay(){
        try {
            Thread.sleep(time);
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }
    }

//Main----------------------------------------------------------------------------------------------------------------------------
    public static void main (String [] args){
        Tetris test = new Tetris(50, 50);
        clear();
        for(int i = 0; i < 20; i++){
            delay();
            clear();
            test.update("O");
            System.out.println(test.printGame());
            Scanner s = new Scanner(System.in);
            if (s.hasNext()) {
            	change_direction = s.next();
            	
            }
        }
        for(int i = 0; i < 80; i++){
            delay();
            clear();
            test.update("T");
            System.out.println(test.printGame());
        }

    }


}
